{"version":3,"sources":["reducers/gallery.js","reducers/index.js","constants/ActionTypes.js","components/Home.js","components/Gallery.js","actions/index.js","components/Choice.js","App.js","serviceWorker.js","index.js"],"names":["initialState","window","Cypress","id","status","rootReducer","combineReducers","gallery","state","action","type","map","Home","className","to","connect","beerPic","dispatch","onLove","console","log","actions","onHate","idScope","e","i","useState","count","setCount","onLoad","onClick","_picId","choice","filter","beerId","setBeerId","LoveItem","num","App","path","component","exact","Gallery","Choice","Boolean","location","hostname","match","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d0b661c.chunk.js","sourcesContent":["import {\n  LOVE,\n  HATE\n} from '../constants/ActionTypes'\n\nconst initialState = (window.Cypress && window.initialState) || [\n  {id:\"1\",status:'unknown'},\n  {id:\"2\",status:'unknown'},\n  {id:\"3\",status:'unknown'},\n  {id:\"4\",status:'unknown'},\n  {id:\"5\",status:'unknown'},\n  {id:\"6\",status:'unknown'},\n  {id:\"7\",status:'unknown'},\n];\n\nexport default function gallery(state = initialState, action) {\n  switch (action.type) {\n    case LOVE:\n      return state.map(gallery => \n        (gallery.id === action.id \n            ? { ...gallery, status:\"Love\"} \n            : gallery)\n        );\n    case HATE:\n      return state.map(gallery => \n        (gallery.id === action.id \n            ? { ...gallery, status:\"Hate\"} \n            : gallery)\n        );   \n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux';\nimport gallery from './gallery';\n\nconst rootReducer = combineReducers({\n  gallery\n})\n\nexport default rootReducer;\n","export const LOVE = 'LOVE';\nexport const HATE = 'HATE';\n","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Some welcome text about where you are\n        </p>\n        <Link to=\"/gallery\" className=\"App-link\">Goto Gallery</Link>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, {useState} from 'react';\nimport '../App.css';\nimport * as actions from '../actions';\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\n\nlet Gallery = ({ onHate, beerPic, onLove }) => {\n   let idScope = beerPic.map((e,i) => i);\n   const [count,setCount] = useState(idScope[0]);\n   let handleLove = _picId => {\n        setCount(count+1);\n        onLove(_picId)\n    };\n    let handleHate = _picId => {\n        setCount(count+1);\n        onHate(_picId)\n    };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          You are in the Gallery\n        </p>\n        <div id='gallery'>\n            { count >= 7  \n                ? (\n                    <div onLoad={console.log(beerPic)}>\n                        <Link to=\"/choice\">Goto Choice</Link>\n                    </div>\n                  ) \n                : (\n                    <div>\n                        <button id=\"hateButton\"\n                            onClick={()=>handleHate(beerPic[count].id)}            \n                        > Hate </button>\n                        <span id='beerPic'> {beerPic[count].id} : {beerPic[count].status} </span>\n                        <button id=\"loveButton\" \n                            onClick={()=>handleLove(beerPic[count].id)}\n                        > Love </button>\n                        <div id='beerPicLog'>{idScope.map(e =>  e===count ? '+ ' : '- ')}</div>\n                    </div>\n                  )\n            }       \n        </div>\n      </header>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  beerPic: state.gallery\n});\n\nconst mapDispatchToProps = (dispatch, id) => ({\n  onLove: id => dispatch(actions.love(id)),\n  onHate: id => dispatch(actions.hate(id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Gallery);\n","import * as types from '../constants/ActionTypes';\n\nexport const love = id => {\n    console.log({ type: types.LOVE, id })\n    return { type: types.LOVE, id };\n};\nexport const hate = id => {\n    console.log({ type: types.HATE, id })\n    return { type: types.HATE, id };\n};\n\n","import React, {useState} from 'react';\nimport '../App.css';\nimport { connect } from \"react-redux\";\n\nlet Choice = ({choice}) => {\n  let [beerId,setBeerId] = useState('');\n  let LoveItem = ({num}) => {\n      let handleItemClick = () => {\n           setBeerId(beerId = num);\n           console.log('beerId :', beerId);\n      };\n      return <span onClick={handleItemClick}>#{num}<br/></span>;\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>You love: </p>\n        <div id='choice'>\n            {choice.map(e => <LoveItem num={e.id}/>)}\n        </div>\n        <p>\n          You are in a world of chosen cards\n        </p>\n      </header>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  choice: state.gallery.filter(e => e.status==='Love')\n});\n\nexport default connect(\n  mapStateToProps\n)(Choice);\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Gallery from './components/Gallery';\nimport Choice from './components/Choice';\n\nfunction App() {\n  return (\n    <main>\n        <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/gallery\" component={Gallery}/>\n            <Route path=\"/choice\" component={Choice}/>            \n        </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, HashRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>   \n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\nif (window.Cypress) {\n    window.store = store;\n};\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}